#!/usr/bin/env python
"""
"""

import logging
import sys
import xml.etree.ElementTree as et

try:
    import html2text
except:
    logging.warning("Unable to load html2text. Text conversion will be impossible!")

class Formats: #{{{
    HTML = "html"
    TEXT = "txt"
#}}}

def nl(to=sys.stdout):
    to.write("\n")

class TextFormatter: #{{{
    def __init__(self, enex): #{{{
        self.enex = enex
    #}}}


    def write(self, to): #{{{
        title = self.enex.title()
        to.write(title)
        to.write("\n")
        to.write('-' * len(title))
        to.write("\n\n")

        doc = et.fromstring(self.enex.content().encode("ascii", 'replace'))

        h = html2text.HTML2Text()
        h.ignore_links = False
        to.write(h.handle(et.tostring(doc, 'utf-8', 'html')))
    #}}}
#}}}


class HtmlFormatter: #{{{

    def __init__(self, enex): #{{{
        self.enex = enex
    #}}}


    def write(self, to): #{{{
        # to.write(self.enex.content().encode("utf-8", "xmlcharrefreplace"))
        nl(to)
        nl(to)
        nl(to)
        nl(to)
        to.write("<!DOCTYPE HTML>")
        html = et.Element('html')
        doc = et.ElementTree(html)
        et.SubElement(html, 'head')
        body = et.SubElement(html, 'body')

        content = et.fromstring(self.enex.content().encode('ascii', 'replace'))

        body.append(content)

        doc.write(to)
        nl(to)
    #}}}
#}}}


class EnexFile: #{{{

    def __init__(self, path):
        logging.info("Process "+path)
        self.root = et.parse(path)
        if not self._assert():
            raise RuntimeError("{0}: invalid format.")

    def _assert(self): #{{{
        """ Assert that the format is correct.
        """

        if logging.getLogger().isEnabledFor(logging.DEBUG):
            logging.debug(et.dump(self.root))

        if self.root.getroot().tag != "en-export" or None in (
               self.root.find("./note/title"),
               self.root.find("./note/content"),
               self.root.find("./note/created"),
               self.root.find("./note/note-attributes"),
           ):
            return False

        return True
    #}}}


    def title(self): #{{{
        """Returns /en-export/note/title
        """

        return self.root.find("./note/title").text
    #}}}


    def content(self): #{{{
        """Returns /en-export/note/content
        """

        return self.contentNode().text
    #}}}

    def contentNode(self): #{{{
        return self.root.find("./note/content")
    #}}}

#}}}


def convert_file(infile, outfile, format=Formats.HTML): #{{{
    """Convert from ENEX infile to OUTFILE.

    The default format is Formats.HTML.
    """

    logging.info("Convert {0} to {1}".format(infile, outfile))
    logging.debug("format={0}".format(format))

    enex = EnexFile(infile)

    f = None
    if format == Formats.HTML:
        f = HtmlFormatter(enex)
    elif format == Formats.TEXT:
        f = TextFormatter(enex)
    else:
        raise ValueError("Unsupported format: {0}".format(format))

    f.write(sys.stdout)
#}}}


def main(args): #{{{
    "Main entry point."

    logging.getLogger().setLevel(logging.DEBUG)
    convert_file(args[1], args[2])
#}}}


if __name__ == "__main__": #{{{
    main(sys.argv)
#}}}
